import os
import requests
import re
from dotenv import load_dotenv  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
from .sheet_handler import find_tire_stock
from .ai_gemini import ask_gpt

load_dotenv()
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")

def handle_message(event):
    reply_token = event['replyToken']
    user_text = event['message']['text'].strip()

    # 1) ‡∏ñ‡∏≤‡∏° AI ‚Üí ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "ai"
    if user_text.lower().startswith("ai"):
        prompt = user_text[2:].strip()  # ‡∏ï‡∏±‡∏î "ai" ‡∏≠‡∏≠‡∏Å
        if prompt:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
            reply_text = ask_gpt(prompt)
            send_reply(reply_token, reply_text)
        return  # ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠

    # 2) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "am" ‚Üí ‡πÇ‡∏´‡∏°‡∏î admin (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô)
    if user_text.lower().startswith("am"):
        tire_text = user_text[2:].strip()  # ‡∏ï‡∏±‡∏î "am" ‡∏≠‡∏≠‡∏Å
        # ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ tire_text ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if is_tire_code(tire_text):
            results = find_tire_stock(tire_text)
            if results:
                # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
                send_bubble_stack(reply_token, tire_text, results, admin_mode=True)
            else:
                send_reply(reply_token, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á~ üòä")
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á ‚Üí ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö (‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö)
        return

    # 3) ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ am)
    if is_tire_code(user_text):
        results = find_tire_stock(user_text)
        if results:
            # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ + 300
            send_bubble_stack(reply_token, user_text, results, admin_mode=False)
        else:
            send_reply(reply_token, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á~ üòä")
        return

    # 4) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢ ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö (‡πÄ‡∏á‡∏µ‡∏¢‡∏ö)
    return


# ‡πÅ‡∏Å‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á +300 ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 0
def send_bubble_stack(reply_token, user_text, results, admin_mode=False):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Bubble ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (stack ‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏•‡∏á‡∏°‡∏≤)
    admin_mode=True ‚Üí ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏µ‡∏ï
    admin_mode=False ‚Üí ‡∏ö‡∏ß‡∏Å 300 ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0
    """
    bubble = {
        "type": "bubble",
        "header": {
            "type": "box",
            "layout": "vertical",
            "backgroundColor": "#FFD700",
            "contents": [
                {
                    "type": "text",
                    "text": f"‡∏£‡∏´‡∏±‡∏™ {user_text}",
                    "weight": "bold",
                    "color": "#000000",
                    "size": "lg"
                }
            ]
        },
        "body": {
            "type": "box",
            "layout": "vertical",
            "spacing": "md",
            "contents": []
        }
    }

    body_contents = []

    for r in results:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        cost_price = float(r['price']) if r['price'] else 0.0

        if admin_mode:
            # üü¢ ‡πÇ‡∏´‡∏°‡∏î Admin ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô‡∏à‡∏£‡∏¥‡∏á
            display_price = cost_price
        else:
            # üîµ ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤ > 0 ‚Üí ‡∏ö‡∏ß‡∏Å 300, ‡∏ñ‡πâ‡∏≤ 0 ‚Üí ‡πÑ‡∏°‡πà‡∏ö‡∏ß‡∏Å
            if cost_price > 0:
                display_price = cost_price + 300
            else:
                display_price = 0

        row_box = {
            "type": "box",
            "layout": "horizontal",
            "spacing": "sm",
            "contents": [
                {
                    "type": "box",
                    "layout": "vertical",
                    "flex": 3,
                    "contents": [
                        {
                            "type": "text",
                            "text": f"{r['brand']} - {r['model']}",
                            "weight": "bold",
                            "size": "sm"
                        },
                        {
                            "type": "text",
                            "text": f"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏¢‡∏≤‡∏á: {r['tire_code_a']}",
                            "size": "sm"
                        },
                        {
                            "type": "text",
                            "text": f"‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {r['qty']} ‡πÄ‡∏™‡πâ‡∏ô",
                            "size": "sm"
                        },
                        {
                            "type": "text",
                            "text": f"DOT: {r['dot']}",
                            "size": "sm"
                        },
                        {
                            "type": "text",
                            "text": f"‡∏£‡∏≤‡∏Ñ‡∏≤: {int(display_price)} ‡∏ö‡∏≤‡∏ó",
                            "size": "sm"
                        }
                    ]
                }
            ]
        }

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ
        if r.get('img_url'):
            row_box["contents"].append({
                "type": "image",
                "url": r['img_url'],
                "size": "sm",
                "aspectMode": "cover",
                "action": {
                    "type": "uri",
                    "uri": r['img_url']
                }
            })

        body_contents.append(row_box)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° "Python by KenDev." ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á
    body_contents.append({
        "type": "box",
        "layout": "horizontal",
        "contents": [
            {"type": "filler"},
            {
                "type": "text",
                "text": "Python by KenDev.",
                "size": "xs",
                "color": "#888888",
                "align": "end"
            }
        ]
    })

    bubble["body"]["contents"] = body_contents
    send_flex_reply(reply_token, [bubble])



def send_reply(reply_token, text):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    data = {
        "replyToken": reply_token,
        "messages": [
            {
                "type": "text",
                "text": text
            }
        ]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=data)


def send_flex_reply(reply_token, bubbles):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    data = {
        "replyToken": reply_token,
        "messages": [
            {
                "type": "flex",
                "altText": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
                "contents": {
                    "type": "carousel",
                    "contents": bubbles
                }
            }
        ]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=data)
# ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ


def is_tire_code(text):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á
    pattern = r'^(\d{3}[\/x\*\-]?\d{2,3}([\/x\*R]?\d{2})?)$'
    return re.match(pattern, text.replace(" ", "").upper()) is not None
