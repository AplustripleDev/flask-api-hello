import os
import requests
import re
from .sheet_handler import find_tire_stock
# ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ GPT ‡πÉ‡∏´‡πâ import ‡∏î‡πâ‡∏ß‡∏¢
# from .ai_handler import ask_gpt

# ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ .env local:
# from dotenv import load_dotenv
# load_dotenv()

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")

def handle_message(event):
    reply_token = event['replyToken']
    user_text = event['message']['text'].strip()

    # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ GPT:
    # if user_text.lower().startswith("‡∏ñ‡∏≤‡∏°ai:"):
    #     prompt = user_text[7:].strip()
    #     reply_text = ask_gpt(prompt)
    #     send_reply(reply_token, reply_text)
    #     return

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á‡πÑ‡∏´‡∏°
    if is_tire_code(user_text):
        results = find_tire_stock(user_text)
        if results:
            bubbles = []
            for r in results:
                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢
                text_contents = [
                    {
                        "type": "text",
                        "text": f"{r['brand']} - {r['model']}",
                        "weight": "bold",
                        "size": "md"
                    },
                    {
                        "type": "text",
                        "text": f"‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {r['code']}",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": f"‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {r['qty']} ‡πÄ‡∏™‡πâ‡∏ô",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": f"DOT: {r['dot']}",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": f"‡∏£‡∏≤‡∏Ñ‡∏≤: {r['price']} ‡∏ö‡∏≤‡∏ó",
                        "size": "sm"
                    },
                    {
                        "type": "text",
                        "text": "Python by KenDev.",
                        "size": "xs",
                        "color": "#888888",
                        "align": "start"
                    }
                ]

                # ‡∏à‡∏±‡∏î layout ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏ã‡πâ‡∏≤‡∏¢ = text_contents, ‡∏Ç‡∏ß‡∏≤ = ‡∏£‡∏π‡∏õ‡πÄ‡∏•‡πá‡∏Å)
                body_contents = [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "flex": 4,
                        "spacing": "sm",
                        "contents": text_contents
                    }
                ]

                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ
                if r['img_url']:
                    body_contents.append({
                        "type": "image",
                        "url": r['img_url'],
                        "size": "xxs",
                        "aspectMode": "cover",
                        "align": "end",
                        "action": {
                            "type": "uri",
                            "uri": r['img_url']  # ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏ç‡πà
                        }
                    })

                bubble = {
                    "type": "bubble",
                    "header": {
                        "type": "box",
                        "layout": "vertical",
                        "backgroundColor": "#FFD700",  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°
                        "contents": [
                            {
                                "type": "text",
                                "text": f"‡∏£‡∏´‡∏±‡∏™ {user_text}",
                                "weight": "bold",
                                "color": "#000000",
                                "size": "lg"
                            }
                        ]
                    },
                    "body": {
                        "type": "box",
                        "layout": "horizontal",
                        "spacing": "md",
                        "contents": body_contents
                    }
                }
                bubbles.append(bubble)

            send_flex_reply(reply_token, bubbles)
        else:
            send_reply(reply_token, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á~ üòä")
        return

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á ‚Üí ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    send_reply(reply_token, f"‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: {user_text}")

def send_reply(reply_token, text):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    data = {
        "replyToken": reply_token,
        "messages": [{
            "type": "text",
            "text": text
        }]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=data)

def send_flex_reply(reply_token, bubbles):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    data = {
        "replyToken": reply_token,
        "messages": [
            {
                "type": "flex",
                "altText": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
                "contents": {
                    "type": "carousel",
                    "contents": bubbles
                }
            }
        ]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=data)

def is_tire_code(text):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô 185/60R15, 1856015, 33x12.5R15, etc.
    pattern = r'^(\d{3}[\/x\*\-]?\d{2,3}([\/x\*R]?\d{2})?)$'
    return re.match(pattern, text.replace(" ", "").upper()) is not None
