import os
import requests
import re
from .sheet_handler import find_tire_stock

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")

def handle_message(event):
    reply_token = event['replyToken']
    user_text = event['message']['text'].strip()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á‡πÑ‡∏´‡∏°
    if is_tire_code(user_text):
        results = find_tire_stock(user_text)
        if results:
            # üî¥ ‡∏™‡∏£‡πâ‡∏≤‡∏á Bubble ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            bubble = {
                "type": "bubble",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "backgroundColor": "#FFD700",  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏™‡∏î
                    "contents": [
                        {
                            "type": "text",
                            "text": f"‡∏£‡∏´‡∏±‡∏™ {user_text}",
                            "weight": "bold",
                            "color": "#000000",
                            "size": "lg"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "md",
                    "contents": []
                }
            }

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô body
            body_contents = []

            # üü° ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ results
            for r in results:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏ã‡πâ‡∏≤‡∏¢=‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏Ç‡∏ß=‡∏£‡∏π‡∏õ)
                row_box = {
                    "type": "box",
                    "layout": "horizontal",
                    "spacing": "sm",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "vertical",
                            "flex": 3,
                            "contents": [
                                {
                                    "type": "text",
                                    "text": f"{r['brand']} - {r['model']}",
                                    "weight": "bold",
                                    "size": "sm"
                                },
                                {
                                    "type": "text",
                                    "text": f"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏¢‡∏≤‡∏á: {r['tire_code_a']}",
                                    "size": "sm"
                                },
                                {
                                    "type": "text",
                                    "text": f"‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {r['qty']} ‡πÄ‡∏™‡πâ‡∏ô",
                                    "size": "sm"
                                },
                                {
                                    "type": "text",
                                    "text": f"DOT: {r['dot']}",
                                    "size": "sm"
                                },
                                {
                                    "type": "text",
                                    "text": f"‡∏£‡∏≤‡∏Ñ‡∏≤: {r['price']} ‡∏ö‡∏≤‡∏ó",
                                    "size": "sm"
                                }
                            ]
                        }
                    ]
                }

                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ ‚Üí ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
                if r.get('img_url'):
                    row_box["contents"].append({
                        "type": "image",
                        "url": r['img_url'],
                        "size": "sm",         # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        "aspectMode": "cover",
                        "action": {
                            "type": "uri",
                            "uri": r['img_url']  # ‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà
                        }
                    })

                # ‡πÄ‡∏û‡∏¥‡πà‡∏° row_box ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô body_contents
                body_contents.append(row_box)

            # üü° ‡πÄ‡∏û‡∏¥‡πà‡∏° Text ‚ÄúPython by KenDev.‚Äù (‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á) ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡∏Å 1 ‡∏ö‡∏•‡πá‡∏≠‡∏Å
            body_contents.append({
                "type": "box",
                "layout": "horizontal",
                "contents": [
                    {
                        "type": "filler"  # ‡∏î‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
                    },
                    {
                        "type": "text",
                        "text": "Python by KenDev.",
                        "size": "xs",
                        "color": "#888888",
                        "align": "end"
                    }
                ]
            })

            # ‡πÉ‡∏™‡πà body_contents ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô bubble
            bubble["body"]["contents"] = body_contents

            # ‡∏™‡πà‡∏á bubble ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô carousel
            send_flex_reply(reply_token, [bubble])

        else:
            send_reply(reply_token, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á~ üòä")
        return

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á
    send_reply(reply_token, f"‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: {user_text}")

def send_reply(reply_token, text):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    data = {
        "replyToken": reply_token,
        "messages": [{
            "type": "text",
            "text": text
        }]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=data)

def send_flex_reply(reply_token, bubbles):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    data = {
        "replyToken": reply_token,
        "messages": [
            {
                "type": "flex",
                "altText": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
                "contents": {
                    "type": "carousel",
                    "contents": bubbles
                }
            }
        ]
    }
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=data)

def is_tire_code(text):
    pattern = r'^(\d{3}[\/x\*\-]?\d{2,3}([\/x\*R]?\d{2})?)$'
    return re.match(pattern, text.replace(" ", "").upper()) is not None
